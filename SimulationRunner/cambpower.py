"""Module containing a stand-alone script which compares the power spectrum of ICs
to the power spectrum fed into MP-GenIC, rad from CLASS format files."""
import argparse
import os
import scipy.interpolate as interp
import numpy as np
import matplotlib
matplotlib.use("PDF")
import matplotlib.pyplot as plt
from nbodykit.lab import BigFileCatalog,FFTPower

class CAMBPowerSpectrum(object):
    """Class to store some routines for manipulating and storing power spectra as generated by CAMB.
        The implementation mostly mirrors that in C++ in N-GenIC."""
    def __init__(self, camb_matter, camb_transfer, kmin=1e-5,kmax=1e10):
        pk_camb = np.log10(np.loadtxt(camb_matter))
        assert np.shape(pk_camb)[1] == 2
        lpi,hpi = list(np.searchsorted(pk_camb[:,0], [np.log10(kmin), np.log10(kmax)]))
        # Build an interpolator for the matter power spectrum
        self.dpk = interp.interp1d(pk_camb[lpi:hpi, 0], pk_camb[lpi:hpi, 1], kind='cubic')
        self.kk = 10**pk_camb[lpi:hpi,0]
        # Build interpolators for various species of transfer functions.
        tk_camb = np.loadtxt(camb_transfer)
        #Do this dividing by the total, to avoid the odd CAMB units.
        lti,hti = list(np.searchsorted(tk_camb[:,0], [kmin, kmax]))
        logktrans = np.log10(tk_camb[lti:hti,0])
        self.dtk = {}
        self.dtk['DM'] = interp.interp1d(logktrans, (tk_camb[lti:hti, 1]/tk_camb[lti:hti, 6])**2, kind='cubic')
        #Baryons
        self.dtk['by'] = interp.interp1d(logktrans, (tk_camb[lti:hti, 2]/tk_camb[lti:hti, 6])**2, kind='cubic')
        #Massive neutrinos
        self.dtk['nu'] = interp.interp1d(logktrans, (tk_camb[lti:hti, 5]/tk_camb[lti:hti, 6])**2, kind='cubic')
        #DM + baryons
        self.dtk['DMby'] = interp.interp1d(logktrans, (tk_camb[lti:hti, 7]/tk_camb[lti:hti, 6])**2, kind='cubic')

    def get_camb_power(self, kvals, species='tot'):
        """Get a matter power spectrum for DM, baryons, nu from CAMB.
        kvals - k values to interpolate to
        species - dm, bar or nu. Transfer function to use."""
        lgkvals = np.log10(kvals)
        if species == 'tot':
            return 10**self.dpk(lgkvals)
        tk =  self.dtk[species](lgkvals)
        return 10**self.dpk(lgkvals)*tk

def check_ic_power_spectra(genicfileout, camb_zstr, npart, separate_gas=True, separate_nu=True, outdir=".", accuracy=0.05):
    """Generate the power spectrum for each particle type from the generated simulation files
    and check that it matches the input. This is a consistency test on each simulation output."""
    #Generate power spectra
    output = os.path.join(outdir, genicfileout)
    #Now check that they match what we put into the simulation, from CAMB
    #Reload the CAMB files from disc, just in case something went wrong writing them.
    matterpow = os.path.join(outdir,"camb_linear/ics_matterpow_"+camb_zstr+".dat")
    transfer = os.path.join(outdir, "camb_linear/ics_transfer_"+camb_zstr+".dat")
    cambpow = CAMBPowerSpectrum(matterpow, transfer)
    #Error to tolerate on simulated power spectrum
    #Check whether we output neutrinos
    for sp in ["DM","by"]:
        #GenPK output is at PK-[nu,by,DM]-basename(genicfileout)
        tt = '1/'
        if sp == "by":
            tt = '0/'
            if not separate_gas:
                continue
        cat = BigFileCatalog(output, dataset=tt, header='Header')
        cat.to_mesh(Nmesh=npart*2, window='cic', compensated=True, interlaced=True)
        pk = FFTPower(cat, mode='1d', Nmesh=npart*2)
        #GenPK output is at PK-[nu,by,DM]-basename(genicfileout)
        #Load the power spectra
        #Convert units from kpc/h to Mpc/h
        kk_ic = pk.power['k'][1:]*1e3
        Pk_ic = pk.power['power'][1:].real/1e9
        #Load the power spectrum. Note that DM may incorporate other particle types.
        if not separate_gas and not separate_nu and sp =="DM":
            Pk_camb = cambpow.get_camb_power(kk_ic, species="tot")
        elif not separate_gas and separate_nu and sp == "DM":
            Pk_camb = cambpow.get_camb_power(kk_ic, species="DMby")
        #Case with separate_gas true and separate_nu false is assumed to have omega_nu = 0.
        else:
            Pk_camb = cambpow.get_camb_power(kk_ic, species=sp)
        #Check that they agree between 1/4 the box and 1/4 the nyquist frequency
        mink = np.min(kk_ic)
        imax = np.searchsorted(kk_ic, npart*mink/4)
        imin = np.searchsorted(kk_ic, mink*4)
        #Make some useful figures
        plt.semilogx(kk_ic, Pk_ic/Pk_camb,linewidth=2)
        plt.semilogx([kk_ic[0]*0.9,kk_ic[-1]*1.1], [0.95,0.95], ls="--",linewidth=2)
        plt.semilogx([kk_ic[0]*0.9,kk_ic[-1]*1.1], [1.05,1.05], ls="--",linewidth=2)
        plt.semilogx([kk_ic[imin],kk_ic[imin]], [0,1.5], ls=":",linewidth=2)
        plt.semilogx([kk_ic[imax],kk_ic[imax]], [0,1.5], ls=":",linewidth=2)
        plt.ylim(0., 1.5)
        plt.savefig(os.path.join(outdir,"ICS/PK-IC-"+sp+"-diff.pdf"))
        plt.clf()
        plt.loglog(kk_ic, Pk_ic,linewidth=2)
        plt.loglog(kk_ic, Pk_camb,ls="--", linewidth=2)
        plt.ylim(ymax=Pk_camb[0]*10)
        plt.savefig(os.path.join(outdir,"ICS/PK-IC-"+sp+"-abs.pdf"))
        plt.clf()
        error = abs(Pk_ic[imin:imax]/Pk_camb[imin:imax] -1)
        #Don't worry too much about one failing mode.
        if np.size(np.where(error > accuracy)) > 3:
            raise RuntimeError("Pk accuracy check failed for "+sp+". Max error: "+str(np.max(error)))

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('genicfile', type=str, help='File with generated ICs')
    parser.add_argument('--czstr', type=str, help='Redshift string used in class files',required=True)
    parser.add_argument('--npart', type=int,help='Number of particles in ICs',required=True)
    parser.add_argument('--gas', action='store_true', help='If true, assume separate gas is used',required=False)
    parser.add_argument('--nu', action='store_true', help='If true, assume separate neutrinos are used',required=False)
    args = parser.parse_args()
    check_ic_power_spectra(args.genicfile, camb_zstr = args.czstr, npart=args.npart, separate_gas = args.gas, separate_nu = args.nu)

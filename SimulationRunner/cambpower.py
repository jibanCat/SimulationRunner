"""Module containing a stand-alone script which compares the power spectrum of ICs
to the power spectrum fed into MP-GenIC, read from CLASS format files."""
import argparse
import os
import scipy.interpolate as interp
import numpy as np
import matplotlib
matplotlib.use("PDF")
import matplotlib.pyplot as plt
from nbodykit.lab import BigFileCatalog,FFTPower

class CLASSPowerSpectrum(object):
    """Class to store some routines for manipulating and storing power spectra as generated by CLASS."""
    def __init__(self, camb_matter, camb_transfer, omega0, omegab, omeganu=0):
        pk_camb = np.log10(np.loadtxt(camb_matter))
        assert np.shape(pk_camb)[1] == 2
        # Build an interpolator for the matter power spectrum
        self.dpk = interp.interp1d(pk_camb[:, 0], pk_camb[:, 1], kind='cubic')
        self.kk = 10**pk_camb[:,0]
        # Build interpolators for various species of transfer functions.
        tk_camb = np.loadtxt(camb_transfer)
        #Do this dividing by the total, to avoid the odd CAMB units.
        logktrans = np.log10(tk_camb[:,0])
        self.dtk = {}
        ttot = (omegab * tk_camb[:,2] + (omega0 - omegab) * tk_camb[:,3])
        if omeganu > 0:
            ttot += omeganu * tk_camb[:,6]
        ttot /= omega0
        self.dtk[1] = interp.interp1d(logktrans, (tk_camb[:, 3]/ttot)**2, kind='cubic')
        #Baryons
        self.dtk[0] = interp.interp1d(logktrans, (tk_camb[:, 2]/ttot)**2, kind='cubic')

    def get_class_power(self, kvals, species=-1):
        """Get a matter power spectrum for DM, baryons, nu from CAMB.
        kvals - k values to interpolate to
        species - dm, bar or nu. Transfer function to use."""
        lgkvals = np.log10(kvals)
        if species < 0:
            return 10**self.dpk(lgkvals)
        tk =  self.dtk[species](lgkvals)
        return 10**self.dpk(lgkvals)*tk

def plot_ic_power(kk_ic, Pk_ic, Pk_camb, npart, sp=1, outdir="."):
    """Make the plot"""
    #Make some useful figures
    #Check that they agree between 1/4 the box and 1/4 the nyquist frequency
    mink = np.min(kk_ic)
    imax = np.searchsorted(kk_ic, npart*mink/4)
    imin = np.searchsorted(kk_ic, mink*4)
    error = abs(Pk_ic[imin:imax]/Pk_camb[imin:imax] -1)
    plt.semilogx(kk_ic, Pk_ic/Pk_camb,linewidth=2)
    plt.semilogx([kk_ic[0]*0.9,kk_ic[-1]*1.1], [0.95,0.95], ls="--",linewidth=2)
    plt.semilogx([kk_ic[0]*0.9,kk_ic[-1]*1.1], [1.05,1.05], ls="--",linewidth=2)
    plt.semilogx([kk_ic[imin],kk_ic[imin]], [0,1.5], ls=":",linewidth=2)
    plt.semilogx([kk_ic[imax],kk_ic[imax]], [0,1.5], ls=":",linewidth=2)
    plt.ylim(0., 1.5)
    plt.savefig(os.path.join(outdir,"ICS/PK-IC-"+str(sp)+"-diff.pdf"))
    plt.clf()
    plt.loglog(kk_ic, Pk_ic,linewidth=2)
    plt.loglog(kk_ic, Pk_camb,ls="--", linewidth=2)
    plt.ylim(ymax=Pk_camb[0]*10)
    plt.savefig(os.path.join(outdir,"ICS/PK-IC-"+str(sp)+"-abs.pdf"))
    plt.clf()
    return error

def check_ic_power_spectra(genicfileout, camb_zstr, outdir=".", accuracy=0.05):
    """Generate the power spectrum for each particle type from the generated simulation files
    and check that it matches the input. This is a consistency test on each simulation output."""
    #Generate power spectra
    output = os.path.join(outdir, genicfileout)
    #Now check that they match what we put into the simulation, from CAMB
    #Reload the CAMB files from disc, just in case something went wrong writing them.
    matterpow = os.path.join(outdir,"camb_linear/ics_matterpow_"+camb_zstr+".dat")
    transfer = os.path.join(outdir, "camb_linear/ics_transfer_"+camb_zstr+".dat")
    #Load DM catalog and try for a baryon catalog
    cats = {1: BigFileCatalog(output, dataset='1/', header='Header')}
    try:
        cats[0] = BigFileCatalog(output, dataset='0/', header='Header')
    except:
        pass
    omegab = cats[1].attrs['OmegaBaryon']
    omega0 = cats[1].attrs['Omega0']
    npart = int(np.round(np.cbrt(cats[1].attrs['TotNumPart'][0])))
    cambpow = CLASSPowerSpectrum(matterpow, transfer,omega0=omega0, omegab=omegab)
    for sp in cats.keys():
        #GenPK output is at PK-[nu,by,DM]-basename(genicfileout)
        cats[sp].to_mesh(Nmesh=npart*2, window='cic', compensated=True, interlaced=True)
        pk = FFTPower(cats[sp], mode='1d', Nmesh=npart*2)
        #GenPK output is at PK-[nu,by,DM]-basename(genicfileout)
        #Load the power spectra
        #Convert units from kpc/h to Mpc/h
        kk_ic = pk.power['k'][1:]*1e3
        Pk_ic = pk.power['power'][1:].real/1e9
        #Load the power spectrum. Note that DM may be total.
        ccsp = sp
        if len(cats) > 1:
            ccsp = -1
        Pk_camb = cambpow.get_class_power(kk_ic, species=ccsp)
        error = plot_ic_power(kk_ic, Pk_ic, Pk_camb, sp=sp, npart=npart, outdir=outdir)
        #Don't worry too much about one failing mode.
        if np.size(np.where(error > accuracy)) > 3:
            raise RuntimeError("Pk accuracy check failed for "+sp+". Max error: "+str(np.max(error)))

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('genicfile', type=str, help='File with generated ICs')
    parser.add_argument('--czstr', type=str, help='Redshift string used in class files',required=True)
    parser.add_argument('--npart', type=int,help='Number of particles in ICs',required=False)
    parser.add_argument('--gas', action='store_true', help='If true, assume separate gas is used',required=False)
    args = parser.parse_args()
    check_ic_power_spectra(args.genicfile, camb_zstr = args.czstr)
